generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex", "driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

enum MemberRole {
  ADMIN
  TEACHER
  STUDENT
}

model Profile {
  id        String  @id @default(uuid()) @db.Uuid
  userId    String  @unique
  name      String
  imageUrl  String?  
  email     String  

  role      MemberRole @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course {
  id          String     @id @default(uuid()) @db.Uuid
  userId      String
  title       String
  description String?
  imageUrl    String?
  price       Float?
  isPublished Boolean    @default(false)

  categoryId  String?    @db.Uuid
  category    Category?  @relation(fields: [categoryId], references: [id])
  attachments Attachment[]
  chapters    Chapter[] 
  purchases   Purchase[]

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([categoryId])
}

model Attachment {
  id        String     @id @default(uuid()) @db.Uuid
  name      String
  url       String

  courseId  String     @db.Uuid
  course    Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([courseId])
}

model Category {
  id        String     @id @default(uuid()) @db.Uuid
  name      String
  courses   Course[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Chapter {
  id          String     @id @default(uuid()) @db.Uuid
  title       String
  description String?
  videoUrl    String?
  position    Int
  isPublished Boolean    @default(false)
  isFree      Boolean    @default(false)

  muxData     MuxData?

  courseId    String     @db.Uuid
  course      Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([courseId])
}

model MuxData {
  id          String     @id @default(uuid()) @db.Uuid
  assetId     String
  playbackId  String?

  chapterId   String     @unique @db.Uuid
  chapter     Chapter    @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id          String     @id @default(uuid()) @db.Uuid
  userId      String

  chapterId   String     @db.Uuid
  chapter     Chapter    @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean    @default(false)

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([chapterId])
  @@unique([userId, chapterId])
}

model Purchase {
  id          String     @id @default(uuid()) @db.Uuid
  userId      String

  courseId    String     @db.Uuid
  course      Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id                String     @id @default(uuid()) @db.Uuid
  userId            String     @unique
  stripeCustomerId String     @unique

  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}

model Logging {
  id             String   @id @default(uuid()) @db.Uuid
  url            String
  method         String
  body           String?
  response       String?
  statusCode     Int?
  errorMessage   String?
  createdAt      DateTime @default(now())
}
